generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Subtask {
    id          String  @id @default(cuid())
    title       String
    isCompleted Boolean
    task        Task    @relation(fields: [taskId], references: [id])
    taskId      String
}

model Task {
    id          String    @id @default(cuid())
    title       String
    description String?
    status      String
    subtasks    Subtask[]
    column      Column    @relation(fields: [columnId], references: [id])
    columnId    String
}

model Column {
    id      String @id @default(cuid())
    name    String
    tasks   Task[]
    board   Board  @relation(fields: [boardId], references: [id])
    boardId String
}

model Board {
    id       String   @id @default(cuid())
    name     String
    columns  Column[]
    author   User?    @relation(fields: [authorId], references: [id])
    authorId String?
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id        String    @id @default(cuid())
    name      String?
    email     String?   @unique
    createdAt DateTime  @default(now()) @map(name: "created_at")
    updatedAt DateTime  @updatedAt @map(name: "updated_at")
    boards    Board[]
    accounts  Account[]
    sessions  Session[]

    @@map(name: "users")
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
